Capítulo: Serializer
    
    Você precisa instalar o djangorestframework e o resetframework
        pip install djangorestframework
        pip install resetframework             
    
    Você precisa criar a página serializer.py dentro do app que você vai usar serializer e nela
    
    Importar o model e o serializer do rest_framework e sobrescrever a class GenreSerializer
        from rest_framework import serializers
        from genres.models import Genre

        class GenreSerializer(serializers.ModelSerializer): #ModelSerializer é como o modelform é para o form
            
            class Meta:
                model = Genre
                fields = '__all__'

    Agora dentro de View você pode importar o seu serializer, o seu model e o generics do framework 
        from genres.models import Genre #Seu Model
        from rest_framework import generics #Classe listcreate e RetrieveUpdateDelety
        from genres.serializer import GenreSerializer #Sua serializer
        from rest_framework.permissions import IsAuthenticated #Vai preceisar de permissão para fazer
        from genres.permissions import GenrePermissionClass #Sua permissionClass
    
    Em view você pode sobrescrever as class de ListView para listar e criar e sobrescrver a class RetrieveUpdateDestroy
        class GenreCreateListView(generics.ListCreateAPIView): #lista e cria
            permission_classes = (IsAuthenticated, GenrePermissionClass) #precisa de permissão agora que é de uma arquivo permission
            queryset = Genre.objects.all() #Lista todos os objetos do banco de dados
            serializer_class = GenreSerializer #Serializa      
        class GenreRetrieveUpadateDestroyView(generics.RetrieveUpdateDestroyAPIView): #Deleta, update, detalha
            permission_classes = (IsAuthenticated, GenrePermissionClass)
            queryset = Genre.objects.all()
            serializer_class = GenreSerializer       




Capítulo: JWT(Authentication e permission de usuários)
    
    Você precisa instalar o djangorestframework e o resetframework
        pip install djangorestframework
        pip install resetframework
        pip install djangorestframework-simplejwt             
    
    Em Settings eu tenho que colocar:

        você precisa falar que ele vai usar a class simplewjwt
            REST_FRAMEWORK = {
                'DEFAULT_AUTHENTICATION_CLASSES': (
                    'rest_framework_simplejwt.authentication.JWTAuthentication',
                ),
            }

            from datetime import timedelta

            SIMPLE_JWT = {
                "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),#Configurações padrões do JWT
                "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
            }
        Você precisa colocar rest_framework_simplejwt em Instaled app E a pasta Authentication
            INSTALLED_APPS = [
                'rest_framework',
                'rest_framework_simplejwt',
                'authentication',
                (...)
            ]    

    Cria um token para verificar a pessoa. 
        Precisa instalar 'djangorestframework-simplejwt' e criar o app Authentication que vai precisar das páginas urls.py
            pip install djangorestframework-simplejwt      
            python manage.py startapp authentication     
        
        Você vai passar a criar e gestão de Autentificação
        Em URLs você precisa importar a criação, o refresh e o verify de TOKEN
            from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView
        Depois importar o caminho para gerar token você passa a usa-los
            urlpatterns = [
                path('authentication/token/',TokenObtainPairView.as_view(), name='token_obtain_pair'),
                path('authentication/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),#Gera um novo token que dura 5 min. Refresh token dura 24 horas
                path('authentication/token/verify/', TokenVerifyView.as_view(), name='token_verify'),#Verifica se o token ainda esta valido
            ]    

    Permission por app Dentro do app você cria o arquivo permissions.py e a class de permissão personalizada
        from rest_framework import permissions


        class GenrePermissionClass (permissions.BasePermission):
            
                #has_perm é uma funçao de user que pede um parametro em formato de string com o nome completo da permissão
                #Sintaxe padrão app.metodo_model
                
            

            def has_permission(self, request, view):
                if request.method in ['GET', 'OPTIONS', 'HEAD']: #Ver se o request é get e se for
                    return request.user.has_perm('genres.view_genre') #Ver se o usuário tem permissão 
                
                if request.method == 'POST':
                    return request.user.has_perm('genres.add_genre')
                
                if request.method in ['PATCH', 'PUT']:
                    return request.user.has_perm('genres.change_genre')
                
                if request.method == 'DELETE':
                    return request.user.has_perm('genres.delete_genre')
                
                return False

    Permission Global
        Dentro do coração do seu projeto você vai criar o arquivo permissions.py e lá colocar a class permission
        
            from rest_framework import permissions
            #has_perm é uma funçao de user que pede um parametro em formato de string com o nome completo da permissão
            #Sintaxe padrão app.metodo_model

            from rest_framework import permissions


            class GlobalDefaultPermission(permissions.BasePermission):
                """
                Global model permissions
                """

                def has_permission(self, request, view):
                    model_permission_codename = self.__get_model_permission_codename(request.method, view)

                    if not model_permission_codename:
                        return False

                    return request.user.has_perm(model_permission_codename)

                def __get_model_permission_codename(self, method, view):
                    try:
                        model_name = view.queryset.model._meta.model_name
                        app_label = view.queryset.model._meta.app_label
                        action = self.__get_action_suffix(method)
                        return f"{app_label}.{action}_{model_name}"
                    except AttributeError:
                        return None

                def __get_action_suffix(self, method):
                    method_actions = {
                        'GET': 'view',
                        'POST': 'add',
                        'PUT': 'change',
                        'PATCH': 'change',
                        'DELETE': 'delete',
                        'OPTIONS': 'view',
                        'HEAD': 'view',
                    }
                    return method_actions.get(method, '')
                            
